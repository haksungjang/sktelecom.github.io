<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SKT Open Source â€“ Feature Store</title>
    <link>/guide/components/feature-store/</link>
    <description>Recent content in Feature Store on SKT Open Source</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="/guide/components/feature-store/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Guide: Introduction to Feast</title>
      <link>/guide/components/feature-store/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guide/components/feature-store/overview/</guid>
      <description>
        
        
        &lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
  &lt;h4 class=&#34;alert-heading&#34;&gt;Alpha&lt;/h4&gt;
  This Kubeflow component has &lt;b&gt;alpha&lt;/b&gt; status with limited support. See the
  &lt;a href=&#34;/docs/reference/version-policy/&#34;&gt;Kubeflow versioning policies&lt;/a&gt;.
  The Kubeflow team is interested in your   
  &lt;a href=&#34;https://github.com/feast-dev/feast/issues&#34;&gt;feedback&lt;/a&gt;&lt;/h4&gt; 
  about the usability of the feature.
&lt;/div&gt;
&lt;p&gt;Use &lt;a href=&#34;http://feast.dev/&#34;&gt;Feast&lt;/a&gt; for defining, managing, discovering, validating, and serving features to your models during training and inference.&lt;/p&gt;
&lt;p&gt;This page introduces feature store concepts as well as Feast as a component of Kubeflow.&lt;/p&gt;
&lt;h2 id=&#34;introduction-to-feature-stores&#34;&gt;Introduction to feature stores&lt;/h2&gt;
&lt;p&gt;Feature stores are systems that help to address some of the key challenges that ML teams face when productionizing features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feature sharing and reuse&lt;/strong&gt;: Engineering features is one of the most time consuming activities in building an end-to-end ML system, yet many teams continue to develop features in silos. This leads to a high amount of re-development and duplication of work across teams and projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Serving features at scale&lt;/strong&gt;: Models need data that can come from a variety of sources, including event streams, data lakes, warehouses, or notebooks. ML teams need to be able to store and serve all these data sources to their models in a performant and reliable way. The challenge is scalably producing massive datasets of features for model training, and providing access to real-time feature data at low latency and high throughput in serving.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency between training and serving&lt;/strong&gt;: The separation between data scientists and engineering teams often lead to the re-development of feature transformations when moving from training to online serving. Inconsistencies that arise due to discrepancies between training and serving implementations frequently leads to a drop in model performance in production.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Point-in-time correctness&lt;/strong&gt;:  General purpose data systems are not built with ML use cases in mind and by extension don&amp;rsquo;t provide point-in-time correct lookups of feature data. Without a point-in-time correct view of data, models are trained on datasets that are not representative of what is found in production, leading to a drop in accuracy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Data quality and validation&lt;/strong&gt;: Features are business critical inputs to ML systems. Teams need to be confident in the quality of data that is served in production and need to be able to react when there is any drift in the underlying data.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;feast-as-a-feature-store&#34;&gt;Feast as a feature store&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://feast.dev/&#34;&gt;Feast&lt;/a&gt; is an &lt;a href=&#34;https://github.com/feast-dev/feast&#34;&gt;open-source&lt;/a&gt; feature store that helps teams operate ML systems at scale by allowing them to define, manage, validate, and serve features to models in production.&lt;/p&gt;
&lt;p&gt;Feast provides the following functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Load streaming and batch data&lt;/strong&gt;: Feast is built to be able to ingest data from a variety of bounded or unbounded sources. Feast allows users to ingest data from streams, object stores, databases, or notebooks. Data that is ingested into Feast is persisted in both online store and historical stores, which in turn is used for the creation of training datasets and serving features to online systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Standardized definitions&lt;/strong&gt;: Feast becomes the single source of truth for all feature definitions and data within an organization. Teams are able to capture documentation, metadata, and metrics about features. This allows teams to communicate clearly about features, test feature data, and determine if a feature is both safe and relevant to their use cases.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Historical serving&lt;/strong&gt;: Features that are persisted in Feast can be retrieved through its feature serving APIs to produce training datasets. Feast is able to produce massive training datasets that are agnostics of the data source that was used to ingest the data originally. Feast is also able to ensure point-in-time correctness when joining these data sources, which in turn ensures the quality and consistency of features reaching models.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Online serving&lt;/strong&gt;: Feast exposes low latency serving APIs for all data that has been ingested into the system. This allows all production ML systems to use Feast as the primary data source when looking up real-time features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Consistency between training and serving&lt;/strong&gt;: Feast provides a consistent view of feature data through the use of a unified ingestion layer, unified serving API and canonical feature references. By building ML systems on feature references, teams abstract away the underlying data infrastructure and make it possible to safely move models between training and serving without a drop in data consistency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feature sharing and reuse&lt;/strong&gt;: Feast provides a discovery and metadata API that allows teams to track, share, and reuse features across projects. Feast also decouples the process of creating features from the process of consumption, meaning teams that start new projects can begin by simply consuming features that already exist in the store, instead of starting from scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Statistics and validation&lt;/strong&gt;: Feast allows for the generation of statistics based on features within the systems. Feast has compatibility with TFDV, meaning statistics that are generated by Feast can be validated using TFDV. Feast also allows teams to capture TFDV schemas as part of feature definitions, allowing domain experts to define data properties that can be used for validating these features in other production settings like training, ingestion, or serving.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;p&gt;Please follow the &lt;a href=&#34;/docs/components/feature-store/getting-started/&#34;&gt;Getting Started with Feast&lt;/a&gt; guide to set up Feast and run walk through our tutorials.&lt;/p&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.feast.dev/&#34;&gt;Feast: Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/feast-dev/feast&#34;&gt;Feast: Source Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/blog/products/ai-machine-learning/introducing-feast-an-open-source-feature-store-for-machine-learning&#34;&gt;Google Cloud - Introducing Feast: An open source feature store for machine learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.gojekengineering.com/feast-bridging-ml-models-and-data-efd06b7d1644&#34;&gt;Medium - Feast: Bridging ML Models and Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Guide: Getting started with Feast</title>
      <link>/guide/components/feature-store/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/guide/components/feature-store/getting-started/</guid>
      <description>
        
        
        &lt;p&gt;This guide provides the necessary resources to install &lt;a href=&#34;http://feast.dev/&#34;&gt;Feast&lt;/a&gt; alongside Kubeflow, describes the usage of Feast with Kubeflow components, and provides examples that users can follow to test their setup.&lt;/p&gt;
&lt;p&gt;For an overview of Feast, please read &lt;a href=&#34;/docs/components/feature-store/overview/&#34;&gt;Introduction to Feast&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;installing-feast-with-kubeflow&#34;&gt;Installing Feast with Kubeflow&lt;/h2&gt;
&lt;p&gt;This guide assumes that you have a running Kubeflow cluster already. If you don&amp;rsquo;t have Kubeflow installed, then head on over to the
&lt;a href=&#34;/docs/started/getting-started/&#34;&gt;Kubeflow installation guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feast can be installed into a running Kubeflow deployment. The process of installing Feast into Kubernetes is documented in the &lt;a href=&#34;https://docs.feast.dev/getting-started/install-feast/kubernetes-with-helm&#34;&gt;Deploying Feast into Kubernetes&lt;/a&gt; guide. Please follow this guide to install Feast into the same Kubernetes cluster as Kubeflow.&lt;/p&gt;
&lt;h2 id=&#34;accessing-feast-from-kubeflow&#34;&gt;Accessing Feast from Kubeflow&lt;/h2&gt;
&lt;p&gt;Once Feast is installed within the same Kubernetes cluster as Kubeflow, users can access its APIs directly without any additional steps.&lt;/p&gt;
&lt;p&gt;Feast APIs can roughly be grouped into the following sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Feature definition and management&lt;/strong&gt;: Feast provides both a &lt;a href=&#34;https://docs.feast.dev/getting-started/connect-to-feast&#34;&gt;Python SDK&lt;/a&gt; and &lt;a href=&#34;https://docs.feast.dev/getting-started/connect-to-feast&#34;&gt;CLI&lt;/a&gt; for interacting with Feast Core. Feast Core allows users to define and register features and entities and their associated metadata and schemas. The Python SDK is typically used from within a Jupyter notebook by end users to administer Feast, but ML teams may opt to version control feature specifications in order to follow a GitOps based approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Model training&lt;/strong&gt;: The Feast Python SDK can be used to trigger the &lt;a href=&#34;https://docs.feast.dev/user-guide/getting-training-features&#34;&gt;creation of training datasets&lt;/a&gt;. The most natural place to use this SDK is to create a training dataset as part of a &lt;a href=&#34;/docs/pipelines/pipelines-overview&#34;&gt;Kubeflow Pipeline&lt;/a&gt; prior to model training.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Model serving&lt;/strong&gt;: Feast provides three different SDKs for &lt;a href=&#34;https://docs.feast.dev/user-guide/getting-online-features&#34;&gt;online feature serving&lt;/a&gt;, a &lt;a href=&#34;https://api.docs.feast.dev/python/&#34;&gt;Python SDK&lt;/a&gt;, &lt;a href=&#34;https://javadoc.io/doc/dev.feast/feast-sdk&#34;&gt;Java SDK&lt;/a&gt;, and &lt;a href=&#34;https://godoc.org/github.com/feast-dev/feast/sdk/go&#34;&gt;Go SDK&lt;/a&gt;. These clients are used prior to inference with &lt;a href=&#34;/docs/pipelines/pipelines-overview&#34;&gt;Model Serving&lt;/a&gt; systems like KFServing, TFX, or Seldon.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the above clients interact with Feast through gRPC endpoints (&lt;a href=&#34;https://api.docs.feast.dev/grpc/feast.core.pb.html&#34;&gt;Core&lt;/a&gt;, &lt;a href=&#34;https://api.docs.feast.dev/grpc/feast.serving.pb.html&#34;&gt;Serving&lt;/a&gt;). These APIs allow users to directly interface with Feast services if they do not wish to use an SDK.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;p&gt;Feast also comes with &lt;a href=&#34;https://github.com/feast-dev/feast/tree/master/examples&#34;&gt;example notebooks&lt;/a&gt; that users can use to get up to speed quickly.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For more details on Feast concepts please see the &lt;a href=&#34;https://docs.feast.dev/&#34;&gt;Feast documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please see our &lt;a href=&#34;https://github.com/feast-dev/feast/blob/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt; and &lt;a href=&#34;https://docs.feast.dev/roadmap&#34;&gt;roadmap&lt;/a&gt; for new or upcoming functionality.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Please use &lt;a href=&#34;https://github.com/feast-dev/feast/issues&#34;&gt;GitHub issues&lt;/a&gt; for any feedback, issues, or feature requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you would like to get involved with Feast, come and visit us in &lt;a href=&#34;https://kubeflow.slack.com/archives/CE0L8T267&#34;&gt;#Feast&lt;/a&gt; in the &lt;a href=&#34;https://join.slack.com/t/kubeflow/shared_invite/zt-cpr020z4-PfcAue_2nw67~iIDy7maAQ&#34;&gt;Kubeflow Slack&lt;/a&gt;, or join our &lt;a href=&#34;https://docs.feast.dev/community&#34;&gt;community calls&lt;/a&gt;, &lt;a href=&#34;https://docs.feast.dev/community&#34;&gt;mailing list&lt;/a&gt;, or have a look at our &lt;a href=&#34;https://docs.feast.dev/contributing/contributing&#34;&gt;contribution process&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
